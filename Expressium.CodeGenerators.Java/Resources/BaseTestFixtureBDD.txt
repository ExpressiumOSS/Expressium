package BusinessTests.Steps;

import Bases.Asserts;
import Bases.BaseTest;
import Bases.LoggerInitializer;
import io.cucumber.core.backend.TestCaseState;
import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;
import org.apache.commons.lang3.reflect.FieldUtils;
import org.apache.commons.lang3.reflect.MethodUtils;

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class BaseTestFixtureBDD extends BaseTest {
    private static final Field field = FieldUtils.getField(Scenario.class, "delegate", true);
    private static Method getError;
    private Scenario scenario;

    @Before
    public void beforeScenario(Scenario scenario) {
        this.scenario = scenario;
        initializeFixture(scenario);

        initializeBrowser();

        BaseSteps.initialize(logger, driver, asserts);
    }

    @After
    public void afterScenario() {
        if (scenario.isFailed()) {
            Throwable error = getError(scenario);
            if (error != null)
                logErrorMessages(error.getMessage());
        }

        finalizeFixture(scenario);
    }

    public void initializeFixture(Scenario scenario) {
        if (configuration.getLogging()) {
            if (configuration.getLoggingPath() == null)
                throw new IllegalArgumentException("Property loggingPath is undefined...");

            File directory = new File(configuration.getLoggingPath());
            if (!directory.exists())
                directory.mkdir();

            File outputPath = new File(String.format("%s\\%s", configuration.getLoggingPath(), getValidFileName(scenario.getName())));
            if (!outputPath.exists())
                outputPath.mkdir();

            String filePath = String.format("%s\\%s", outputPath, "TestAutomation.log");
            logger = LoggerInitializer.initialize(getValidFileName(scenario.getName()), filePath);
            asserts = new Asserts(logger);
        } else {
            logger = LoggerInitializer.initialize(getValidFileName(scenario.getName()), null);
            asserts = new Asserts(logger);
        }

        // Scenario Categories...
        String category = scenario.getSourceTagNames().toString();
        category = category.replace("[", "").replace("]", "").replaceAll("@", "");

        logger.info(String.format("// Initialize Testcase Fixture"));
        logger.info(String.format("Company: %s", configuration.getCompany()));
        logger.info(String.format("Project: %s", configuration.getProject()));
        logger.info(String.format("Environment: %s", configuration.getEnvironment()));
        logger.info(String.format("Url: %s", configuration.getUrl()));
        logger.info(String.format("Name: %s", getValidFileName(scenario.getName())));
        logger.info(String.format("Category: ", category));
        logger.info(String.format("Date: %s", DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm").format(LocalDateTime.now())));
        logger.info(String.format(""));
    }

    public void finalizeFixture(Scenario scenario) {
        if (configuration.getLogging()) {
            logger.info(String.format(""));
            logger.info(String.format("// Finalize Testcase Fixture"));
        }

        if (driver != null) {
            if (configuration.getScreenshot()) {
                String name = getValidFileName(scenario.getName());
                String filePath = String.format("%s\\%s\\%s.%s", configuration.getLoggingPath(), name, name, "png");
                saveScreenShot(filePath);

                logger.info(String.format("Screenshot has been saved: %s.%s", name, "png"));
            }

            if (configuration.getShowAlerts()) {
                String status;
                if (scenario.isFailed())
                    status = "Testcase has failed during execution...";
                else
                    status = "Testcase was successfully executed...";

                showAlertMessage(status, configuration.getShowAlertsTimeOut());
            }

            driver.quit();
        }

        if (configuration.getLogging()) {
            if (scenario.isFailed())
                logger.info(String.format("Number of failed tests: %d", 1));
            else
                logger.info(String.format("Number of passed tests: %d", 1));

            String status;
            if (scenario.isFailed())
                status = "Testcase has failed during execution...";
            else
                status = "Testcase was successfully executed...";

            logger.info(status + "\r\n");
            logger.getLoggerRepository().shutdown();
        }
    }

    private Throwable getError(Scenario scenario) {
        try {
            final TestCaseState testCase = (TestCaseState) field.get(scenario);
            if (getError == null) {
                getError = MethodUtils.getMatchingMethod(testCase.getClass(), "getError");
                getError.setAccessible(true);
            }
            return (Throwable) getError.invoke(testCase);
        } catch (Exception e) {
            logger.error("getError has failed during execution...");
        }

        return null;
    }
}