package Controls;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import java.util.List;

public class WebTable extends WebControl {

    public WebTable(WebDriver driver, By locator) {
        super(driver, locator);
    }

    public WebTable(WebDriver driver, By locator, By childLocator) {
        super(driver, locator, childLocator);
    }

    public int getNumberOfRows() {
        return getElement().findElements(By.xpath("./tbody/tr")).size();
    }

    public int getNumberOfColumns() {
        return getElement().findElements(By.xpath("./thead/tr/th")).size();
    }

    public void clickCell(Object rowId, Object columnId) {
        By cellLocator = getCellElement(rowId, columnId, "//*");
        WebButton control = new WebButton(driver, locator, cellLocator);
        control.click();
    }

    public void setCellTextBox(Object rowId, Object columnId, String value) {
        By cellLocator = getCellElement(rowId, columnId, "//input");
        WebTextBox control = new WebTextBox(driver, locator, cellLocator);
        control.setText(value);
    }

    public String getCellTextBox(Object rowId, Object columnId) {
        By cellLocator = getCellElement(rowId, columnId, "//input");
        WebTextBox control = new WebTextBox(driver, locator, cellLocator);
        return control.getText();
    }

    public void setCellCheckBox(Object rowId, Object columnId, boolean value) {
        By cellLocator = getCellElement(rowId, columnId, "//input");
        WebCheckBox control = new WebCheckBox(driver, locator, cellLocator);
        control.setChecked(value);
    }

    public boolean getCellCheckBox(Object rowId, Object columnId) {
        By cellLocator = getCellElement(rowId, columnId, "//input");
        WebCheckBox control = new WebCheckBox(driver, locator, cellLocator);
        return control.getChecked();
    }

    public void setCellRadioButton(Object rowId, Object columnId, boolean value) {
        By cellLocator = getCellElement(rowId, columnId, "//input");
        WebRadioButton control = new WebRadioButton(driver, locator, cellLocator);
        control.setSelected(value);
    }

    public boolean getCellRadioButton(Object rowId, Object columnId) {
        By cellLocator = getCellElement(rowId, columnId, "//input");
        WebRadioButton control = new WebRadioButton(driver, locator, cellLocator);
        return control.getSelected();
    }

    public String getCellText(Object rowId, Object columnId) {
        By cellLocator = getCellElement(rowId, columnId, null);
        WebText control = new WebText(driver, locator, cellLocator);
        return control.getText();
    }

    public String getCellText(String cellText) {
        By cellLocator = By.xpath("./tbody/tr/td[contains(text(),'" + cellText + "')]");
        WebText control = new WebText(driver, locator, cellLocator);
        return control.getText();
    }

    public void clickContextMenu(Object rowId, Object columnId, String menuEntry) {
        By cellLocator = getCellElement(rowId, columnId, null);
        WebControl control = new WebControl(driver, locator, cellLocator);
        control.waitForElementIsEnabled();
        control.highlightElementAsAction();
        control.highlightElementClear();
        control.clickElementContextMenu();

        By contextMenuLocator = By.xpath("//li//a[@role='menuitem' and normalize-space()='" + menuEntry + "']");
        WebButton contextMenuControl = new WebButton(driver, contextMenuLocator);
        contextMenuControl.click();
    }

    protected By getCellElement(Object rowId, Object columnId, String subXPath) {
        if (rowId instanceof Integer && columnId instanceof Integer) {
            return By.xpath("./tbody/tr[" + rowId + "]/td[" + columnId + "]" + (subXPath != null ? subXPath : ""));
        } else if (rowId instanceof Integer && columnId instanceof String) {
            return getCellElement(rowId, getColumnIndex((String) columnId), subXPath);
        } else if (rowId instanceof String && columnId instanceof Integer) {
            return By.xpath("./tbody/tr[td[text()='" + rowId + "']]/td[" + columnId + "]" + (subXPath != null ? subXPath : ""));
        } else if (rowId instanceof String && columnId instanceof String) {
            return getCellElement(rowId, getColumnIndex((String) columnId), subXPath);
        } else {
            throw new IllegalArgumentException("Invalid argument types for getCellElement...");
        }
    }

    protected int getColumnIndex(String columnName) {
        By cellLocator = By.xpath("./thead/tr/th");
        List<WebElement> columnElements = getElement().findElements(cellLocator);

        for (int i = 0; i < columnElements.size(); i++) {
            if (columnElements.get(i).getText().equals(columnName)) {
                return i + 1;
            }
        }

        throw new RuntimeException("The column name '" + columnName + "' was not found...");
    }
}