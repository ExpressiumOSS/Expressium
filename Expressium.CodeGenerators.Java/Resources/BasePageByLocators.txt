package Bases;

import org.apache.log4j.Logger;
import org.openqa.selenium.*;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;
import java.util.ArrayList;

public class BasePage {
    protected static Logger logger = Logger.getLogger(BasePage.class);

    protected WebDriver driver;

    public static int pageFactoryTimeOut;
    public static long pageWaitTimeOut;

    static {
        pageFactoryTimeOut = 10;
        pageWaitTimeOut = 10;
    }

    public BasePage(WebDriver driver) throws Exception {
        this.driver = driver;

        waitForPageDocumentReadyStateEqualsComplete();

        PageFactory.initElements(new AjaxElementLocatorFactory(driver, pageFactoryTimeOut), this);
    }

    public String getTitle() {
        logger.info(String.format("getTitle()"));
        return driver.getTitle();
    }

    public String getURL() {
        logger.info(String.format("getURL()"));
        return driver.getCurrentUrl();
    }

    protected void waitForPageDocumentReadyStateEqualsComplete() throws Exception {

        Duration timeout = Duration.ofSeconds (pageWaitTimeOut);
        boolean success = new WebDriverWait(driver, timeout).until((ExpectedCondition<Boolean>) wd ->
                ((JavascriptExecutor) wd).executeScript("return document.readyState").equals("complete"));

        if (!success) {
            logger.debug(String.format("Page document ready state was expected to be completed within %s seconds...", pageWaitTimeOut));
            throw new Exception("waitForPageDocumentReadyStateEqualsComplete failed");
        }
    }

    protected void waitForPageTitleEquals(String title) {
        Duration timeout = Duration.ofSeconds (pageWaitTimeOut);
        WebDriverWait wait = new WebDriverWait(driver, timeout);
        boolean success = wait.until(ExpectedConditions.titleIs(title));

        if (!success) {
            logger.debug(String.format("Page title was expected to be equal to '%s' but was '%s' within %s seconds...", title, driver.getTitle(), pageWaitTimeOut));
            throw new TimeoutException("waitForPageTitleEquals failed");
        }
    }

    protected void waitForPageTitleContains(String title) {
        Duration timeout = Duration.ofSeconds (pageWaitTimeOut);
        WebDriverWait wait = new WebDriverWait(driver, timeout);
        boolean success = wait.until(ExpectedConditions.titleContains(title));

        if (!success) {
            logger.debug(String.format("Page title was expected to contain '%s' but was '%s' within %s seconds...", title, driver.getTitle(), pageWaitTimeOut));
            throw new TimeoutException("waitForPageTitleContains failed");
        }
    }

    protected void waitForPageUrlEquals(String url) {
        Duration timeout = Duration.ofSeconds (pageWaitTimeOut);
        WebDriverWait wait = new WebDriverWait(driver, timeout);
        boolean success = wait.until(ExpectedConditions.urlToBe(url));

        if (!success) {
            logger.debug(String.format("Page URL was expected to be equal to '%s' but was '%s' within %s seconds...", url, driver.getCurrentUrl(), pageWaitTimeOut));
            throw new TimeoutException("waitForPageUrlEquals failed");
        }
    }

    protected void waitForPageUrlContains(String url) {
        Duration timeout = Duration.ofSeconds (pageWaitTimeOut);
        WebDriverWait wait = new WebDriverWait(driver, timeout);
        boolean success = wait.until(ExpectedConditions.urlContains(url));

        if (!success) {
            logger.debug(String.format("Page URL was expected to contain '%s' but was '%s' within %s seconds...", url, driver.getCurrentUrl(), pageWaitTimeOut));
            throw new TimeoutException("waitForPageUrlContains failed");
        }
    }

    protected void waitForPageElementIsVisible(By locator) {
        WebElements.waitForElementIsVisible(driver, locator);
    }

    protected void waitForPageElementIsEnabled(By locator) {
        WebElements.waitForElementIsEnabled(driver, locator);
    }

    protected void switchToAlertAccept() {
        logger.info("switchToAlertAccept()");
        driver.switchTo().alert().accept();
    }

    protected int getNumberOfBrowserTabs() {
        int value = driver.getWindowHandles().size();
        logger.info(String.format("getNumberOfBrowserTabs() [%d]", value));
        return value;
    }

    protected void waitForNewBrowserTabIsOpened(int numberOfCurrentTabs) throws Exception {
        boolean found = false;

        int retries = 10;
        long delay = 500;

        for (int i = 0; i < retries; i++) {
            if (driver.getWindowHandles().size() > numberOfCurrentTabs) {
                found = true;
                break;
            } else {
                Thread.sleep(delay);
            }
        }

        if (!found) {
            throw new Exception(String.format("waitForNewBrowserTabIsOpened() has Failed - Expected %d, Found %d", numberOfCurrentTabs + 1, driver.getWindowHandles().size()));
        }
    }

    protected void selectBrowserTab(int index) {
        ArrayList<String> browserTabs = new ArrayList<String>(driver.getWindowHandles());
        driver.switchTo().window(browserTabs.get(index));
    }
}