using log4net;
using RestSharp;
using RestSharp.Authenticators;
using System;
using System.Diagnostics;
using System.Net;

namespace CompanyName.ProjectName.Web.API
{
    public class BaseService
    {
        protected ILog logger;

        protected string username;
        protected string password;

        public string RequestUrl { get; private set; }
        public string RequestMethod { get; private set; }
        public string ResponseStatusCode { get; private set; }
        public string ResponseContent { get; private set; }
        public TimeSpan ResponseElapsedTime { get; private set; }

        public BaseService(ILog logger)
        {
            this.logger = logger;
        }

        public void SetUserCredentials(string username , string password)
        {
            this.username = username;
            this.password = password;
        }

        private RestClient GetRestClient(string url)
        {
            var options = new RestClientOptions { BaseUrl = new Uri(url), UseDefaultCredentials = true };

            if (!string.IsNullOrWhiteSpace(username) && !string.IsNullOrWhiteSpace(password))
            {
                options.Authenticator = new HttpBasicAuthenticator(username, password);
                return new RestClient(options);
            }
            else
            {
                return new RestClient(options);
            }
        }

        protected RestResponse ExecuteGetRequest(string requestUrl)
        {
            var client = GetRestClient(requestUrl);

            var request = new RestRequest();
            request.AddHeader("Content-Type", "application/json");

            var stopWatch = new Stopwatch();
            stopWatch.Start();
            var response = client.ExecuteGet(request);
            stopWatch.Stop();

            RequestUrl = requestUrl;
            RequestMethod = "GET";
            ResponseStatusCode = response.StatusCode.ToString();
            ResponseContent = response.Content;
            ResponseElapsedTime = stopWatch.Elapsed;

            if (response.StatusCode != HttpStatusCode.OK)
                throw new ApplicationException($"Executing service request has failed with StatusCode - {response.StatusCode}...");

            return response;
        }

        protected RestResponse ExecutePostRequest(string requestUrl, string payload)
        {
            var client = GetRestClient(requestUrl);

            var request = new RestRequest();
            request.AddHeader("Content-Type", "application/json");
            request.AddJsonBody(payload);

            var stopWatch = new Stopwatch();
            stopWatch.Start();
            var response = client.ExecutePost(request);
            stopWatch.Stop();

            RequestUrl = requestUrl;
            RequestMethod = "POST";
            ResponseStatusCode = response.StatusCode.ToString();
            ResponseContent = response.Content;
            ResponseElapsedTime = stopWatch.Elapsed;

            if (response.StatusCode != HttpStatusCode.Created)
                throw new ApplicationException($"Executing service request has failed with StatusCode - {response.StatusCode}...");

            return response;
        }
    }
}