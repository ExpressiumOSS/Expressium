using log4net;
using OpenQA.Selenium;
using System;
using System.Linq;

namespace $Company$.$Project$.Web.API
{
    public class BaseTable : BasePage
    {
        protected readonly By baseLocator;

        public BaseTable(ILog logger, IWebDriver driver, By baseLocator) : base(logger, driver)
        {
            this.baseLocator = baseLocator;
        }

        public virtual int GetNumberOfRows()
        {
            logger.InfoFormat("GetNumberOfRows()");
            return baseLocator.GetChildElements(driver, By.XPath("./tbody/tr")).Count;
        }

        public virtual int GetNumberOfColumns()
        {
            logger.InfoFormat("GetNumberOfColumns()");
            return baseLocator.GetChildElements(driver, By.XPath("./thead/tr/th")).Count;
        }

        public virtual void ClickCell(object rowId, object columnId)
        {
            logger.InfoFormat("ClickCell({0}, {1})", rowId, columnId);

            var element = GetCellElement(rowId, columnId, "//*");
            element.Click(driver);
        }

        public virtual void SetCellTextBox(object rowId, object columnId, string value)
        {
            logger.InfoFormat("SetCellTextBox({0}, {1})", rowId, columnId);

            var element = GetCellElement(rowId, columnId, "//input");
            element.SetTextBox(driver, value);
        }

        public virtual string GetCellTextBox(object rowId, object columnId)
        {
            logger.InfoFormat("GetCellTextBox({0}, {1})", rowId, columnId);

            var element = GetCellElement(rowId, columnId, "//input");
            return element.GetTextBox(driver);
        }

        public virtual void SetCellCheckBox(object rowId, object columnId, bool value)
        {
            logger.InfoFormat("SetCellCheckBox({0}, {1})", rowId, columnId);

            var element = GetCellElement(rowId, columnId, "//input");
            element.SetCheckBox(driver, value);
        }

        public virtual bool GetCellCheckBox(object rowId, object columnId)
        {
            logger.InfoFormat("GetCellCheckBox({0}, {1})", rowId, columnId);

            var element = GetCellElement(rowId, columnId, "//input");
            return element.GetCheckBox(driver);
        }

        public virtual string GetCellText(object rowId, object columnId)
        {
            logger.InfoFormat("GetCellText({0}, {1})", rowId, columnId);

            var element = GetCellElement(rowId, columnId, "");
            return element.GetText(driver);
        }

        public virtual void ClickContextMenu(object rowId, object columnId, string menuEntry)
        {
            logger.InfoFormat("ClickContextMenu({0}, {1})", rowId, columnId);

            var element = GetCellElement(rowId, columnId, "");
            element.Click(driver);

            var contextMenuLocator = By.XPath($"//li[@role='menuitem']//a[normalize-space()='{menuEntry}']");
            contextMenuLocator.Click(driver);
        }

        protected virtual IWebElement GetCellElement(object rowId, object columnId, string subXPath)
        {
            if (rowId is int rowIndex && columnId is int columnIndex)
            {
                return baseLocator.GetChildElement(driver, By.XPath($"./tbody/tr[{rowIndex}]/td[{columnIndex}]{subXPath}"));
            }
            else if (rowId is int rowIndexInt && columnId is string columnNameStr)
            {
                return GetCellElement(rowIndexInt, GetColumnIndex(columnNameStr), subXPath);
            }
            else if (rowId is string rowTextStr && columnId is int columnIndexInt)
            {
                return baseLocator.GetChildElement(driver, By.XPath($"./tbody/tr[td[contains(normalize-space(),'{rowTextStr}')]]/td[{columnIndexInt}]{subXPath}"));
            }
            else if (rowId is string rowTextStrAlt && columnId is string columnNameStrAlt)
            {
                return GetCellElement(rowTextStrAlt, GetColumnIndex(columnNameStrAlt), subXPath);
            }
            else
            {
                throw new ArgumentException("Invalid argument types for GetCellElement...");
            }
        }

        public virtual int GetColumnIndex(string columnName)
        {
            var columnNames = baseLocator.GetChildElements(driver, By.XPath("./thead/tr/th")).ToList();

            int index = columnNames.FindIndex((IWebElement element) => element.Text == columnName);

            if (index == -1)
                throw new ApplicationException($"The column name '{columnName}' was not found...");

            return index + 1;
        }
    }
}