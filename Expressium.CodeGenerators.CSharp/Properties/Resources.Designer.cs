//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Expressium.CodeGenerators.CSharp.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Expressium.CodeGenerators.CSharp.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using NUnit.Framework;
        ///
        ///[assembly: Parallelizable(ParallelScope.Fixtures)]
        ///[assembly: LevelOfParallelism(4)].
        /// </summary>
        internal static string AssemblyInfo {
            get {
                return ResourceManager.GetString("AssemblyInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using NUnit.Framework;
        ///using System;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class Asserts
        ///    {
        ///        private readonly ILog logger;
        ///
        ///        public Asserts(ILog logger)
        ///        {
        ///            this.logger = logger;
        ///        }
        ///
        ///        public void EqualTo(object actual, object expected, string message)
        ///        {
        ///            try
        ///            {
        ///                Assert.That(actual, Is.EqualTo(expected), message);
        ///
        ///                logger.InfoFormat(&quot;{0}&quot;, messa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Asserts {
            get {
                return ResourceManager.GetString("Asserts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using BoDi;
        ///using System.IO;
        ///using System.Text.RegularExpressions;
        ///using TechTalk.SpecFlow;
        ///using TechTalk.SpecFlow.Infrastructure;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    [Binding]
        ///    public class BaseHooks : BaseTest
        ///    {
        ///        private readonly FeatureContext featureContext;
        ///        private readonly ScenarioContext scenarioContext;
        ///        private readonly ISpecFlowOutputHelper specFlowOutputHelper;
        ///        private readonly IObjectContainer objectContainer;
        ///
        ///        private  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseHooks {
            get {
                return ResourceManager.GetString("BaseHooks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Reqnroll;
        ///using Reqnroll.BoDi;
        ///using System.IO;
        ///using System.Text.RegularExpressions;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    [Binding]
        ///    public class BaseHooks : BaseTest
        ///    {
        ///        private readonly FeatureContext featureContext;
        ///        private readonly ScenarioContext scenarioContext;
        ///        private readonly IReqnrollOutputHelper reqnrollOutputHelper;
        ///        private readonly IObjectContainer objectContainer;
        ///
        ///        private ContextController contextController;
        ///
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseHooksReqnRoll {
            get {
                return ResourceManager.GetString("BaseHooksReqnRoll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using OpenQA.Selenium;
        ///using OpenQA.Selenium.Support.UI;
        ///using System;
        ///using System.Threading;
        ///using $Company$.$Project$.Web.API.Controls;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class BasePage
        ///    {
        ///        protected ILog logger;
        ///        protected IWebDriver driver;
        ///
        ///        public static int PageTimeOut { get; set; }
        ///
        ///        public static By PageSpinnerLocator { get; set; }
        ///        public static int PageSpinnerInitialTimeOut { get; set; }
        ///        public static [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BasePageByControls {
            get {
                return ResourceManager.GetString("BasePageByControls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using OpenQA.Selenium;
        ///using OpenQA.Selenium.Support.UI;
        ///using System;
        ///using System.Threading;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class BasePage
        ///    {
        ///        protected ILog logger;
        ///        protected IWebDriver driver;
        ///
        ///        public static int PageTimeOut { get; set; }
        ///
        ///        public static By PageSpinnerLocator { get; set; }
        ///        public static int PageSpinnerInitialTimeOut { get; set; }
        ///        public static int PageSpinnerTimeOut { get; set; }
        ///
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BasePageByLocators {
            get {
                return ResourceManager.GetString("BasePageByLocators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using OpenQA.Selenium;
        ///using OpenQA.Selenium.Support.UI;
        ///using SeleniumExtras.PageObjects;
        ///using System;
        ///using System.Threading;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class BasePage
        ///    {
        ///        protected ILog logger;
        ///        protected IWebDriver driver;
        ///
        ///        public static int PageTimeOut { get; set; }
        ///
        ///        public static By PageSpinnerLocator { get; set; }
        ///        public static int PageSpinnerInitialTimeOut { get; set; }
        ///        public static int PageS [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BasePagePageFactory {
            get {
                return ResourceManager.GetString("BasePagePageFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using RestSharp;
        ///using RestSharp.Authenticators;
        ///using System;
        ///using System.Diagnostics;
        ///using System.Net;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class BaseService
        ///    {
        ///        protected ILog logger;
        ///
        ///        protected string username;
        ///        protected string password;
        ///
        ///        public string RequestUrl { get; private set; }
        ///        public string RequestMethod { get; private set; }
        ///        public string ResponseStatusCode { get; private set; }
        ///        public s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseService {
            get {
                return ResourceManager.GetString("BaseService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests.BusinessTests.Steps
        ///{
        ///    public class BaseSteps
        ///    {
        ///        protected Configuration configuration;
        ///        protected ILog logger;
        ///        protected IWebDriver driver;
        ///        protected Asserts Asserts;
        ///
        ///        public BaseSteps(ContextController contextController)
        ///        {
        ///            configuration = contextController.Configuration;
        ///            logger = contextController.Logger;
        ///            Asserts = conte [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseSteps {
            get {
                return ResourceManager.GetString("BaseSteps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using OpenQA.Selenium;
        ///using System;
        ///using System.Linq;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class BaseTable : BasePage
        ///    {
        ///        protected By baseLocator;
        ///
        ///        public BaseTable(ILog logger, IWebDriver driver, By baseLocator) : base(logger, driver)
        ///        {
        ///            this.logger = logger;
        ///            this.driver = driver;
        ///            this.baseLocator = baseLocator;
        ///        }
        ///
        ///        public virtual int GetNumberOfRows()
        ///        {
        ///            logge [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseTable {
            get {
                return ResourceManager.GetString("BaseTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using $Company$.$Project$.Web.API.Controls;
        ///using log4net;
        ///using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class BaseTable : BasePage
        ///    {
        ///        protected WebTable baseControl;
        ///
        ///        public BaseTable(ILog logger, IWebDriver driver, By baseLocator) : base(logger, driver)
        ///        {
        ///            this.logger = logger;
        ///            this.driver = driver;
        ///
        ///            baseControl = new WebTable(driver, baseLocator);
        ///        }
        ///
        ///        public virtual int GetNumberOfR [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseTableByControls {
            get {
                return ResourceManager.GetString("BaseTableByControls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using NUnit.Framework;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class BaseTest : BaseTestFixture
        ///    {
        ///        [OneTimeSetUp]
        ///        protected void InitializeTestcase()
        ///        {
        ///            logger.InfoFormat(&quot;// Initialize Testcase&quot;);
        ///        }
        ///
        ///        public void InitializeBrowserWithLogin()
        ///        {
        ///            InitializeBrowser();
        ///
        ///            // TODO - Implement potential missing login sequence...
        ///
        ///            // var loginPage = new LoginPage(logger, driver);
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseTest {
            get {
                return ResourceManager.GetString("BaseTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using NUnit.Framework;
        ///using NUnit.Framework.Interfaces;
        ///using OpenQA.Selenium;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class BaseTestFixture
        ///    {
        ///        protected readonly Configuration configuration;
        ///
        ///        protected ILog logger;
        ///        protected Asserts Asserts;
        ///        protected IWebDriver driver;
        ///
        ///        public BaseTestFixture()
        ///        {
        ///            configurat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseTestFixture {
            get {
                return ResourceManager.GetString("BaseTestFixture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Extensions.Configuration;
        ///using System;
        ///using System.IO;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class Configuration
        ///    {
        ///        public enum Profiles
        ///        {
        ///            Development,
        ///            Test,
        ///            PreProduction,
        ///            Production
        ///        }
        ///
        ///        public string Company { get; set; }
        ///        public string Project { get; set; }
        ///        public string Environment { get; set; }
        ///        public string Url { get; set; }
        ///        public s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Configuration {
            get {
                return ResourceManager.GetString("Configuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;Profiles&quot;: {
        ///    &quot;Development&quot;: {
        ///      &quot;Company&quot;: &quot;$Company$&quot;,
        ///      &quot;Project&quot;: &quot;$Project$&quot;,
        ///      &quot;Environment&quot;: &quot;Development&quot;,
        ///      &quot;Url&quot;: &quot;$Url$&quot;,
        ///      &quot;Username&quot;: &quot;john.doe@microsoft.com&quot;,
        ///      &quot;Password&quot;: &quot;1234567890&quot;,
        ///      &quot;Logging&quot;: true,
        ///      &quot;LoggingPath&quot;: &quot;.\\TestResults&quot;,
        ///      &quot;BrowserType&quot;: &quot;$BrowserType$&quot;,
        ///      &quot;Maximize&quot;: true,
        ///      &quot;Headless&quot;: false,
        ///      &quot;WindowSize&quot;: false,
        ///      &quot;WindowWidth&quot;: 1920,
        ///      &quot;WindowHeight&quot;: 1080,
        ///      &quot;Highlight&quot;: true,
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ConfigurationJson {
            get {
                return ResourceManager.GetString("ConfigurationJson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class ContextController
        ///    {
        ///        public Configuration Configuration { get; set; }
        ///        public ILog Logger { get; set; }
        ///        public IWebDriver Driver { get; set; }
        ///        public Asserts Asserts {  get; set; }
        ///    }
        ///}.
        /// </summary>
        internal static string ContextController {
            get {
                return ResourceManager.GetString("ContextController", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature: Login
        ///	As a User
        ///	I want to login on the web application
        ///	So that I can administrate my product orders
        ///
        ///@BusinessTests @Id:TC200??
        ///Scenario: Successful User Login with Valid Credentials
        ///	Given I am logged in with valid user credentials
        ///	Then I should be redirected to the Home page.
        /// </summary>
        internal static string Feature {
            get {
                return ResourceManager.GetString("Feature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to echo Runnning LivingDoc Documentation...
        ///
        ///cd .\$Company$.$Project$.Web.API.Tests\bin\Debug\net6.0
        ///
        ///livingdoc test-assembly $Company$.$Project$.Web.API.Tests.dll -t TestExecution.json
        ///
        ///mkdir TestResults
        ///
        ///move LivingDoc.html .\TestResults\LivingDoc.html
        ///
        ///start .\TestResults\LivingDoc.html.
        /// </summary>
        internal static string LivingDoc {
            get {
                return ResourceManager.GetString("LivingDoc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using log4net.Appender;
        ///using log4net.Config;
        ///using log4net.Core;
        ///using log4net.Layout;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class Logger
        ///    {
        ///        public static ILog Initialize(string name, string filePath = null)
        ///        {
        ///            var repository = LoggerManager.CreateRepository(name);
        ///
        ///            var patternLayout = new PatternLayout();
        ///            patternLayout.ConversionPattern = &quot;%date{HH:mm:ss} %level %type # %message%newline&quot;;
        ///            pattern [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Logger {
            get {
                return ResourceManager.GetString("Logger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using TechTalk.SpecFlow;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests.BusinessTests.Steps
        ///{
        ///    [Binding]
        ///    public class LoginSteps : BaseSteps
        ///    {
        ///        public LoginSteps(ContextController contextController) : base(contextController)
        ///        {
        ///        }
        ///
        ///        [Given(@&quot;I am logged in with valid user credentials&quot;)]
        ///        public void GivenIAmLoggedInWithValidUserCredentials()
        ///        {
        ///            throw new PendingStepException();
        ///        }
        ///
        ///        [Then(@&quot;I should be redirected t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LoginSteps {
            get {
                return ResourceManager.GetString("LoginSteps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Reqnroll;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests.BusinessTests.Steps
        ///{
        ///    [Binding]
        ///    public class LoginSteps : BaseSteps
        ///    {
        ///        public LoginSteps(ContextController contextController) : base(contextController)
        ///        {
        ///        }
        ///
        ///        [Given(@&quot;I am logged in with valid user credentials&quot;)]
        ///        public void GivenIAmLoggedInWithValidUserCredentials()
        ///        {
        ///            ScenarioContext.Current.Pending();
        ///        }
        ///
        ///        [Then(@&quot;I should be redirected to the Ho [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LoginStepsReqnRoll {
            get {
                return ResourceManager.GetString("LoginStepsReqnRoll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;
        ///
        ///  &lt;PropertyGroup&gt;
        ///    &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;
        ///  &lt;/PropertyGroup&gt;
        ///
        ///  &lt;ItemGroup&gt;
        ///    &lt;PackageReference Include=&quot;DotNetSeleniumExtras.PageObjects.Core&quot; Version=&quot;4.14.1&quot; /&gt;
        ///    &lt;PackageReference Include=&quot;DotNetSeleniumExtras.WaitHelpers&quot; Version=&quot;3.11.0&quot; /&gt;
        ///    &lt;PackageReference Include=&quot;log4net&quot; Version=&quot;3.0.3&quot; /&gt;
        ///    &lt;PackageReference Include=&quot;RestSharp&quot; Version=&quot;112.1.0&quot; /&gt;
        ///    &lt;PackageReference Include=&quot;Selenium.Support&quot; Version=&quot;4.26.1&quot; /&gt;
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ProjectFileApi {
            get {
                return ResourceManager.GetString("ProjectFileApi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;
        ///
        ///	&lt;PropertyGroup&gt;
        ///		&lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;
        ///	&lt;/PropertyGroup&gt;
        ///
        ///	&lt;ItemGroup&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration&quot; Version=&quot;9.0.0&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Binder&quot; Version=&quot;9.0.0&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Json&quot; Version=&quot;9.0.0&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;17.12.0&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;NUnit&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ProjectFileApiTests {
            get {
                return ResourceManager.GetString("ProjectFileApiTests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;
        ///
        ///	&lt;PropertyGroup&gt;
        ///		&lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;
        ///	&lt;/PropertyGroup&gt;
        ///
        ///	&lt;ItemGroup&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration&quot; Version=&quot;9.0.0&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Binder&quot; Version=&quot;9.0.0&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Json&quot; Version=&quot;9.0.0&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;17.12.0&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;NUnit&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ProjectFileApiTestsReqnRoll {
            get {
                return ResourceManager.GetString("ProjectFileApiTestsReqnRoll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class Randomizer
        ///    {
        ///        private static readonly Random random = new Random();
        ///
        ///        public static string GetRandomString(int length)
        ///        {
        ///            const string chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;
        ///            return new string(Enumerable.Repeat(chars, length).Select(s =&gt; s[random.Next(s.Length)]).ToArray());
        ///        }
        ///
        ///        public static int GetRandomI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Randomizer {
            get {
                return ResourceManager.GetString("Randomizer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to echo Runnning Regression Test...
        ///
        ///set PROFILE=Development
        ///
        ///rmdir /q /s .\$Company$.$Project$.Web.API.Tests\bin\Debug\net6.0\TestResults
        ///
        ///dotnet nuget
        ///dotnet build
        ///
        ///dotnet test .\$Company$.$Project$.Web.API.Tests\$Company$.$Project$.Web.API.Tests.csproj --filter TestCategory=&quot;UITests&quot;
        ///dotnet test .\$Company$.$Project$.Web.API.Tests\$Company$.$Project$.Web.API.Tests.csproj --filter TestCategory=&quot;BusinessTests&quot;.
        /// </summary>
        internal static string RegressionTest {
            get {
                return ResourceManager.GetString("RegressionTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///using System.Diagnostics;
        ///using System.IO;
        ///using System.Threading;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class ScreenRecorder
        ///    {
        ///        private string screenshotsPath;         // Temporary directory for screenshots...
        ///        private int frameRate = 10;             // Frames per second in the video...
        ///        private int delayBetweenFrames = 100;   // Delay between frames in milliseconds...
        ///
        ///        private Task recor [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScreenRecorder {
            get {
                return ResourceManager.GetString("ScreenRecorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Microsoft Visual Studio Solution File, Format Version 12.00
        ///# Visual Studio Version 17
        ///VisualStudioVersion = 17.5.33414.496
        ///MinimumVisualStudioVersion = 10.0.40219.1
        ///Project(&quot;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&quot;) = &quot;$Company$.$Project$.Web.API&quot;, &quot;$Company$.$Project$.Web.API\$Company$.$Project$.Web.API.csproj&quot;, &quot;{C3C90606-9E62-457B-990D-550CADD0AFD9}&quot;
        ///EndProject
        ///Project(&quot;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&quot;) = &quot;$Company$.$Project$.Web.API.Tests&quot;, &quot;$Company$.$Project$.Web.API.Tests\$Company$.$Pr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SolutionFile {
            get {
                return ResourceManager.GetString("SolutionFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebButton : WebControl
        ///    {
        ///        public WebButton(IWebDriver driver, By locator) : base(driver, locator)
        ///        {
        ///        }
        ///
        ///        public WebButton(IWebDriver driver, By locator, By childLocator) : base(driver, locator, childLocator)
        ///        {
        ///        }
        ///
        ///        public virtual void Click()
        ///        {
        ///            WaitForElementIsEnabled();
        ///            HighlightElementAsAction();
        ///            Highl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebButton {
            get {
                return ResourceManager.GetString("WebButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebCheckBox : WebControl
        ///    {
        ///        public WebCheckBox(IWebDriver driver, By locator) : base(driver, locator)
        ///        {
        ///        }
        ///
        ///        public WebCheckBox(IWebDriver driver, By locator, By childLocator) : base(driver, locator, childLocator)
        ///        {
        ///        }
        ///
        ///        public virtual void SetChecked(bool value)
        ///        {
        ///            WaitForElementIsEnabled();
        ///            if ((!IsSelected() &amp;&amp; val [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebCheckBox {
            get {
                return ResourceManager.GetString("WebCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///using OpenQA.Selenium.Support.UI;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebComboBox : WebControl
        ///    {
        ///        public WebComboBox(IWebDriver driver, By locator) : base(driver, locator)
        ///        {
        ///        }
        ///
        ///        public WebComboBox(IWebDriver driver, By locator, By childLocator) : base(driver, locator, childLocator)
        ///        {
        ///        }
        ///
        ///        public virtual void SelectByText(string value)
        ///        {
        ///            if (value == null)
        ///       [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebComboBox {
            get {
                return ResourceManager.GetString("WebComboBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebControl
        ///    {
        ///        protected IWebDriver driver;
        ///
        ///        protected By locator;
        ///        protected By childLocator;
        ///
        ///        protected IWebElement element;
        ///
        ///        protected bool cashed = false;
        ///
        ///        public WebControl(IWebDriver driver, By locator)
        ///        {
        ///            this.driver = driver;
        ///            this.locator = locator;
        ///        }
        ///
        ///        public WebControl(IWebDriver driver, By loca [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebControl {
            get {
                return ResourceManager.GetString("WebControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///using OpenQA.Selenium.Support.UI;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public static class WebControls
        ///    {
        ///        public static void Click(this By locator, IWebDriver driver)
        ///        {
        ///            var element = locator.GetEnabledElement(driver);
        ///            element.HighlightAction(driver);
        ///            element.HighlightClear(driver);
        ///            element.Click();
        ///        }
        ///
        ///        public static void Click(this IWebElement element, IWebDriver driver)
        ///        { [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebControls {
            get {
                return ResourceManager.GetString("WebControls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///using OpenQA.Selenium.Chrome;
        ///using OpenQA.Selenium.Edge;
        ///using OpenQA.Selenium.Firefox;
        ///using System;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class WebDriverFactory
        ///    {
        ///        public enum BrowserTypes
        ///        {
        ///            Chrome,
        ///            Firefox,
        ///            Edge
        ///        }
        ///
        ///        public static IWebDriver Initialize(string browserType, string url = null, bool maximized = true, bool headless = false, bool windowSize = false, int windowWidth  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebDriverFactory {
            get {
                return ResourceManager.GetString("WebDriverFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///using OpenQA.Selenium.Interactions;
        ///using OpenQA.Selenium.Support.UI;
        ///using SeleniumExtras.WaitHelpers;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Threading;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public static class WebElements
        ///    {
        ///        public static int ElementTimeOut { get; set; }
        ///
        ///        public static bool Highlight { get; set; }
        ///        public static int HighlightTimeOut { get; set; }
        ///        public static int High [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebElements {
            get {
                return ResourceManager.GetString("WebElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebLink : WebButton
        ///    {
        ///        public WebLink(IWebDriver driver, By locator) : base(driver, locator)
        ///        {
        ///        }
        ///
        ///        public WebLink(IWebDriver driver, By locator, By childLocator) : base(driver, locator, childLocator)
        ///        {
        ///        }
        ///    }
        ///}.
        /// </summary>
        internal static string WebLink {
            get {
                return ResourceManager.GetString("WebLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebListBox : WebComboBox
        ///    {
        ///        public WebListBox(IWebDriver driver, By locator) : base(driver, locator)
        ///        {
        ///        }
        ///
        ///        public WebListBox(IWebDriver driver, By locator, By childLocator) : base(driver, locator, childLocator)
        ///        {
        ///        }
        ///    }
        ///}.
        /// </summary>
        internal static string WebListBox {
            get {
                return ResourceManager.GetString("WebListBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebRadioButton : WebControl
        ///    {
        ///        public WebRadioButton(IWebDriver driver, By locator) : base(driver, locator)
        ///        {
        ///        }
        ///
        ///        public WebRadioButton(IWebDriver driver, By locator, By childLocator) : base(driver, locator, childLocator)
        ///        {
        ///        }
        ///
        ///        public virtual void SetSelected(bool value)
        ///        {
        ///            WaitForElementIsEnabled();
        ///            if ((!IsSelecte [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebRadioButton {
            get {
                return ResourceManager.GetString("WebRadioButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///using System;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebTable : WebControl
        ///    {
        ///        public WebTable(IWebDriver driver, By locator) : base(driver, locator)
        ///        {
        ///        }
        ///
        ///        public WebTable(IWebDriver driver, By locator, By childLocator) : base(driver, locator, childLocator)
        ///        {
        ///        }
        ///
        ///        public virtual int GetNumberOfRows()
        ///        {
        ///            return GetElement().GetChildElements(driver, By.XPath(&quot;./tbody/tr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebTable {
            get {
                return ResourceManager.GetString("WebTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebText : WebControl
        ///    {
        ///        public WebText(IWebDriver driver, By locator) : base(driver, locator)
        ///        {
        ///        }
        ///
        ///        public WebText(IWebDriver driver, By locator, By childLocator) : base(driver, locator, childLocator)
        ///        {
        ///        }
        ///
        ///        public string GetText()
        ///        {
        ///            WaitForElementIsVisible();
        ///            HighlightElementAsValidation();
        ///            return GetE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebText {
            get {
                return ResourceManager.GetString("WebText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using OpenQA.Selenium;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebTextBox : WebControl
        ///    {
        ///        public WebTextBox(IWebDriver driver, By locator) : base(driver, locator)
        ///        {
        ///        }
        ///
        ///        public WebTextBox(IWebDriver driver, By locator, By childLocator) : base(driver, locator, childLocator)
        ///        {
        ///        }
        ///
        ///        public virtual void SetText(string value)
        ///        {
        ///            if (value == null)
        ///                return;
        ///
        ///            WaitForEle [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebTextBox {
            get {
                return ResourceManager.GetString("WebTextBox", resourceCulture);
            }
        }
    }
}
