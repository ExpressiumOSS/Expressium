//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Expressium.CodeGenerators.CSharp.Playwright.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Expressium.CodeGenerators.CSharp.Playwright.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using NUnit.Framework;
        ///
        ///[assembly: Parallelizable(ParallelScope.Fixtures)]
        ///[assembly: LevelOfParallelism(4)].
        /// </summary>
        internal static string AssemblyInfo {
            get {
                return ResourceManager.GetString("AssemblyInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using NUnit.Framework;
        ///using System;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class Asserts
        ///    {
        ///        private readonly ILog logger;
        ///
        ///        public Asserts(ILog logger)
        ///        {
        ///            this.logger = logger;
        ///        }
        ///
        ///        public void EqualTo(object actual, object expected, string message)
        ///        {
        ///            try
        ///            {
        ///                Assert.That(actual, Is.EqualTo(expected), message);
        ///
        ///                logger.Info($&quot;{message}&quot;);
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Asserts {
            get {
                return ResourceManager.GetString("Asserts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using Microsoft.Playwright;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class BaseContext
        ///    {
        ///        public Configuration Configuration { get; set; }
        ///        public ILog Logger { get; set; }
        ///        public BrowserManager BrowserManager { get; set; }
        ///        public Asserts Asserts {  get; set; }
        ///    }
        ///}.
        /// </summary>
        internal static string BaseContext {
            get {
                return ResourceManager.GetString("BaseContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Reqnroll;
        ///using Reqnroll.BoDi;
        ///using System.IO;
        ///using System.Text.RegularExpressions;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    [Binding]
        ///    public class BaseHooks : BaseTest
        ///    {
        ///        private readonly FeatureContext featureContext;
        ///        private readonly ScenarioContext scenarioContext;
        ///        private readonly IReqnrollOutputHelper reqnrollOutputHelper;
        ///        private readonly IObjectContainer objectContainer;
        ///
        ///        private BaseContext baseContext;
        ///
        ///        publi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseHooks {
            get {
                return ResourceManager.GetString("BaseHooks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///using System;
        ///using $Company$.$Project$.Web.API.Controls;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class BasePage
        ///    {
        ///        protected ILog logger;
        ///        protected IPage page;
        ///
        ///        public static int PageReadyStateTimeOut { get; set; }
        ///
        ///        public static string PageSpinnerSelector { get; set; }
        ///        public static int PageSpinnerInitialTimeOut { get; set; }
        ///        public static int PageSpinner [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BasePage {
            get {
                return ResourceManager.GetString("BasePage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using RestSharp;
        ///using RestSharp.Authenticators;
        ///using System;
        ///using System.Diagnostics;
        ///using System.Net;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class BaseService
        ///    {
        ///        protected ILog logger;
        ///
        ///        protected string username;
        ///        protected string password;
        ///
        ///        public string RequestUrl { get; private set; }
        ///        public string RequestMethod { get; private set; }
        ///        public string ResponseStatusCode { get; private set; }
        ///        public s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseService {
            get {
                return ResourceManager.GetString("BaseService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using Microsoft.Playwright;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests.BusinessTests.Steps
        ///{
        ///    public class BaseSteps
        ///    {
        ///        protected Configuration configuration;
        ///        protected ILog logger;
        ///        protected BrowserManager browserManager;
        ///        protected Asserts Asserts;
        ///
        ///        protected IPage page =&gt; browserManager.Driver;
        ///
        ///        public BaseSteps(BaseContext baseContext)
        ///        {
        ///            configuration = baseContext.Configuration;
        ///            logger [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseSteps {
            get {
                return ResourceManager.GetString("BaseSteps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using $Company$.$Project$.Web.API.Controls;
        ///using log4net;
        ///using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class BaseTable : BasePage
        ///    {
        ///        protected WebTable baseControl;
        ///
        ///        public BaseTable(ILog logger, IPage page, ILocator baseLocator) : base(logger, page)
        ///        {
        ///            baseControl = new WebTable(page, baseLocator);
        ///        }
        ///
        ///        public virtual async Task&lt;int&gt; GetNumberOfRows()
        ///        {
        ///            [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseTable {
            get {
                return ResourceManager.GetString("BaseTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using NUnit.Framework;
        ///using System.Threading.Tasks;
        ///using System;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class BaseTest : BaseTestFixture
        ///    {
        ///        [OneTimeSetUp]
        ///        protected void InitializeTestcase()
        ///        {
        ///            logger.Info(&quot;&quot;);
        ///            logger.Info(&quot;// Initialize Testcase&quot;);
        ///        }
        ///
        ///        public async Task InitializeBrowser()
        ///        {
        ///        }
        ///
        ///        public async Task InitializeBrowserWithLogin()
        ///        {
        ///            await Initializ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseTest {
            get {
                return ResourceManager.GetString("BaseTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using Microsoft.Playwright;
        ///using NUnit.Framework;
        ///using NUnit.Framework.Interfaces;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class BaseTestFixture
        ///    {
        ///        protected readonly Configuration configuration;
        ///        protected readonly BrowserManager browserManager;
        ///
        ///        protected ILog logger;
        ///        protected Asserts Asserts;
        ///
        ///        pr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BaseTestFixture {
            get {
                return ResourceManager.GetString("BaseTestFixture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class BrowserFactory
        ///    {
        ///        public enum BrowserTypes
        ///        {
        ///            Chrome,
        ///            Firefox,
        ///            Edge,
        ///            Webkit
        ///        }
        ///
        ///        public static async Task&lt;IPage&gt; Initialize(Configuration configuration)
        ///        {
        ///            var playwright = await Playwright.CreateAsync();
        ///            var browser = await GetBrowser(playwright [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BrowserFactory {
            get {
                return ResourceManager.GetString("BrowserFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class BrowserManager
        ///    {
        ///        private Configuration configuration;
        ///        private IPage page;
        ///
        ///        public BrowserManager(Configuration configuration)
        ///        {
        ///            this.configuration = configuration;
        ///        }
        ///
        ///        public IPage Driver
        ///        {
        ///            get
        ///            {
        ///                if (page == null)
        ///                {
        ///                    page = [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BrowserManager {
            get {
                return ResourceManager.GetString("BrowserManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///cd /d &quot;.\$Company$.$Project$.Web.API.Tests\bin\Debug\net8.0&quot;
        ///powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;&amp; { .\playwright.ps1 codegen $Url$ }&quot;.
        /// </summary>
        internal static string CodeGeneration {
            get {
                return ResourceManager.GetString("CodeGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Extensions.Configuration;
        ///using System;
        ///using System.IO;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    public class Configuration
        ///    {
        ///        public enum Profiles
        ///        {
        ///            Development,
        ///            Test,
        ///            PreProduction,
        ///            Production
        ///        }
        ///
        ///        public string Company { get; set; }
        ///        public string Project { get; set; }
        ///        public string Environment { get; set; }
        ///        public string Url { get; set; }
        ///        public s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Configuration {
            get {
                return ResourceManager.GetString("Configuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;Profiles&quot;: {
        ///    &quot;Development&quot;: {
        ///      &quot;Company&quot;: &quot;$Company$&quot;,
        ///      &quot;Project&quot;: &quot;$Project$&quot;,
        ///      &quot;Environment&quot;: &quot;Development&quot;,
        ///      &quot;Url&quot;: &quot;$Url$&quot;,
        ///      &quot;Username&quot;: &quot;john.doe@microsoft.com&quot;,
        ///      &quot;Password&quot;: &quot;1234567890&quot;,
        ///      &quot;Logging&quot;: true,
        ///      &quot;LoggingPath&quot;: &quot;.\\TestResults&quot;,
        ///      &quot;BrowserType&quot;: &quot;$BrowserType$&quot;,
        ///      &quot;Maximize&quot;: true,
        ///      &quot;Headless&quot;: false,
        ///      &quot;WindowSize&quot;: false,
        ///      &quot;WindowWidth&quot;: 1920,
        ///      &quot;WindowHeight&quot;: 1080,
        ///      &quot;BrowserTimeOut&quot;: 10000,        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ConfigurationJson {
            get {
                return ResourceManager.GetString("ConfigurationJson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature: Login
        ///	As a User
        ///	I want to login on the web application
        ///	So that I can administrate my product orders
        ///
        ///@BusinessTests @Id:TC200??
        ///Scenario: Successful User Login with Valid Credentials
        ///	Given I am logged in with valid user credentials
        ///	Then I should be redirected to the Home page.
        /// </summary>
        internal static string Feature {
            get {
                return ResourceManager.GetString("Feature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///using System.Threading;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public static class Locators
        ///    {
        ///        public static bool Highlight { get; set; }
        ///        public static int HighlightTimeOut { get; set; }
        ///        public static int HighlightWidth { get; set; }
        ///        public static string HighlightActionColor { get; set; }
        ///        public static string HighlightValidationColor { get; set; }
        ///        public static string HighlightFail [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Locators {
            get {
                return ResourceManager.GetString("Locators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using log4net;
        ///using log4net.Appender;
        ///using log4net.Config;
        ///using log4net.Core;
        ///using log4net.Layout;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class Logger
        ///    {
        ///        public static ILog Initialize(string name, string filePath = null)
        ///        {
        ///            var repository = LoggerManager.CreateRepository(name);
        ///
        ///            var patternLayout = new PatternLayout();
        ///            patternLayout.ConversionPattern = &quot;%date{HH:mm:ss} %level %type # %message%newline&quot;;
        ///            pattern [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Logger {
            get {
                return ResourceManager.GetString("Logger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Reqnroll;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests.BusinessTests.Steps
        ///{
        ///    [Binding]
        ///    public class LoginSteps : BaseSteps
        ///    {
        ///        public LoginSteps(BaseContext baseContext) : base(baseContext)
        ///        {
        ///        }
        ///
        ///        [Given(@&quot;I am logged in with valid user credentials&quot;)]
        ///        public void GivenIAmLoggedInWithValidUserCredentials()
        ///        {
        ///            ScenarioContext.Current.Pending();
        ///        }
        ///
        ///        [Then(@&quot;I should be redirected to the Home page&quot;)]
        ///       [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LoginSteps {
            get {
                return ResourceManager.GetString("LoginSteps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;
        ///
        ///	&lt;PropertyGroup&gt;
        ///		&lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;
        ///	&lt;/PropertyGroup&gt;
        ///
        ///	&lt;ItemGroup&gt;
        ///		&lt;PackageReference Include=&quot;log4net&quot; Version=&quot;3.2.0&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.Playwright&quot; Version=&quot;1.55.0&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;RestSharp&quot; Version=&quot;112.1.0&quot; /&gt;
        ///	&lt;/ItemGroup&gt;
        ///
        ///	&lt;ItemGroup&gt;
        ///		&lt;Folder Include=&quot;Models\&quot; /&gt;
        ///		&lt;Folder Include=&quot;Pages\&quot; /&gt;
        ///	&lt;/ItemGroup&gt;
        ///
        ///&lt;/Project&gt;.
        /// </summary>
        internal static string ProjectFileApi {
            get {
                return ResourceManager.GetString("ProjectFileApi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;
        ///
        ///	&lt;PropertyGroup&gt;
        ///		&lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;
        ///	&lt;/PropertyGroup&gt;
        ///
        ///	&lt;ItemGroup&gt;
        ///		&lt;PackageReference Include=&quot;Expressium.LivingDoc.ReqnrollPlugin&quot; Version=&quot;1.0.1&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration&quot; Version=&quot;9.0.9&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Binder&quot; Version=&quot;9.0.9&quot; /&gt;
        ///		&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Json&quot; Version=&quot;9.0.9&quot; /&gt;
        ///		&lt;PackageReference Incl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ProjectFileApiTests {
            get {
                return ResourceManager.GetString("ProjectFileApiTests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///
        ///namespace $Company$.$Project$.Web.API
        ///{
        ///    public class Randomizer
        ///    {
        ///        private static readonly Random random = new Random();
        ///
        ///        public static string GetRandomString(int length)
        ///        {
        ///            const string chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;
        ///            return new string(Enumerable.Repeat(chars, length).Select(s =&gt; s[random.Next(s.Length)]).ToArray());
        ///        }
        ///
        ///        public static int GetRandomI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Randomizer {
            get {
                return ResourceManager.GetString("Randomizer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to echo Runnning Regression Test...
        ///
        ///set PROFILE=Development
        ///
        ///rmdir /q /s .\$Company$.$Project$.Web.API.Tests\bin\Debug\net8.0\TestResults
        ///
        ///dotnet nuget
        ///dotnet build
        ///
        ///dotnet test .\$Company$.$Project$.Web.API.Tests\$Company$.$Project$.Web.API.Tests.csproj --filter TestCategory=&quot;UITests&quot;
        ///dotnet test .\$Company$.$Project$.Web.API.Tests\$Company$.$Project$.Web.API.Tests.csproj --filter TestCategory=&quot;BusinessTests&quot;.
        /// </summary>
        internal static string RegressionTest {
            get {
                return ResourceManager.GetString("RegressionTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Reqnroll;
        ///
        ///namespace $Company$.$Project$.Web.API.Tests
        ///{
        ///    internal static class ReqnRollExtensions
        ///    {
        ///        internal static void AddAttachmentAsLink(this IReqnrollOutputHelper outputHelper, string path)
        ///        {
        ///            outputHelper.WriteLine($&quot;[Attachment: {path}]&quot;);
        ///        }
        ///    }
        ///}.
        /// </summary>
        internal static string ReqnRollExtension {
            get {
                return ResourceManager.GetString("ReqnRollExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;$schema&quot;: &quot;https://schemas.reqnroll.net/reqnroll-config-latest.json&quot;,
        ///  &quot;formatters&quot;: {
        ///    &quot;expressium&quot;: {
        ///      &quot;outputFilePath&quot;: &quot;LivingDoc.ndjson&quot;,
        ///      &quot;outputFileTitle&quot;: &quot;Expressium.Coffeeshop.Web.API.Tests&quot;
        ///    }
        ///  }
        ///}.
        /// </summary>
        internal static string ReqnRollJson {
            get {
                return ResourceManager.GetString("ReqnRollJson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Microsoft Visual Studio Solution File, Format Version 12.00
        ///# Visual Studio Version 17
        ///VisualStudioVersion = 17.5.33414.496
        ///MinimumVisualStudioVersion = 10.0.40219.1
        ///Project(&quot;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&quot;) = &quot;$Company$.$Project$.Web.API&quot;, &quot;$Company$.$Project$.Web.API\$Company$.$Project$.Web.API.csproj&quot;, &quot;{C3C90606-9E62-457B-990D-550CADD0AFD9}&quot;
        ///EndProject
        ///Project(&quot;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&quot;) = &quot;$Company$.$Project$.Web.API.Tests&quot;, &quot;$Company$.$Project$.Web.API.Tests\$Company$.$Pr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SolutionFile {
            get {
                return ResourceManager.GetString("SolutionFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebButton : WebControl
        ///    {
        ///        public WebButton(IPage page, ILocator locator) : base(page, locator)
        ///        {
        ///        }
        ///
        ///        public virtual async Task Click()
        ///        {
        ///            await locator.WaitForElementIsVisible();
        ///            await locator.HighlightAction(page);
        ///            await locator.HighlightClear(page);
        ///            await locator.ClickAsync();
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebButton {
            get {
                return ResourceManager.GetString("WebButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebCheckBox : WebControl
        ///    {
        ///        public WebCheckBox(IPage page, ILocator locator) : base(page, locator)
        ///        {
        ///        }
        ///
        ///        public virtual async Task SetChecked(bool value)
        ///        {
        ///            if ((await locator.IsCheckedAsync() == false &amp;&amp; value) || (await locator.IsCheckedAsync() == true &amp;&amp; !value))
        ///            {
        ///                await locator.WaitForE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebCheckBox {
            get {
                return ResourceManager.GetString("WebCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebComboBox : WebControl
        ///    {
        ///        public WebComboBox(IPage page, ILocator locator) : base(page, locator)
        ///        {
        ///        }
        ///
        ///        public virtual async Task SetText(string value)
        ///        {
        ///            if (value == null)
        ///                return;
        ///
        ///            await locator.WaitForElementIsVisible();
        ///            await locator.HighlightAction(page);
        ///            aw [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebComboBox {
            get {
                return ResourceManager.GetString("WebComboBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebControl
        ///    {
        ///        protected IPage page;
        ///        protected ILocator locator;
        ///        protected ILocator childLocator;
        ///
        ///        public WebControl(IPage driver, ILocator locator)
        ///        {
        ///            this.page = driver;
        ///            this.locator = locator;
        ///        }
        ///
        ///        public void WaitForPageElementIsVisible()
        ///        {
        ///            locator.WaitForElementIs [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebControl {
            get {
                return ResourceManager.GetString("WebControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebLink : WebButton
        ///    {
        ///        public WebLink(IPage page, ILocator locator) : base(page, locator)
        ///        {
        ///        }
        ///    }
        ///}.
        /// </summary>
        internal static string WebLink {
            get {
                return ResourceManager.GetString("WebLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebListBox : WebComboBox
        ///    {
        ///        public WebListBox(IPage page, ILocator locator) : base(page, locator)
        ///        {
        ///        }
        ///    }
        ///}.
        /// </summary>
        internal static string WebListBox {
            get {
                return ResourceManager.GetString("WebListBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebRadioButton : WebControl
        ///    {
        ///        public WebRadioButton(IPage page, ILocator locator) : base(page, locator)
        ///        {
        ///        }
        ///
        ///        public virtual async Task SetSelected(bool value)
        ///        {
        ///            if ((await locator.IsCheckedAsync() == false &amp;&amp; value) || (await locator.IsCheckedAsync() == true &amp;&amp; !value))
        ///            {
        ///                await locator.W [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebRadioButton {
            get {
                return ResourceManager.GetString("WebRadioButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebTable : WebControl
        ///    {
        ///        public WebTable(IPage page, ILocator locator) : base(page, locator)
        ///        {
        ///        }
        ///
        ///        public virtual async Task&lt;int&gt; GetNumberOfRows()
        ///        {
        ///            var rows = locator.Locator(&quot;tr&quot;);
        ///            return await rows.CountAsync();
        ///        }
        ///
        ///        public virtual async Task&lt;int&gt; GetNumberOfColumns()
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebTable {
            get {
                return ResourceManager.GetString("WebTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebText : WebControl
        ///    {
        ///        public WebText(IPage page, ILocator locator) : base(page, locator)
        ///        {
        ///        }
        ///
        ///        public async Task&lt;string&gt; GetText()
        ///        {
        ///            await locator.WaitForElementIsVisible();
        ///            await locator.HighlightValidation(page);
        ///            return await locator.InnerTextAsync();
        ///        }
        ///    }
        ///}.
        /// </summary>
        internal static string WebText {
            get {
                return ResourceManager.GetString("WebText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.Playwright;
        ///using System.Threading.Tasks;
        ///
        ///namespace $Company$.$Project$.Web.API.Controls
        ///{
        ///    public class WebTextBox : WebControl
        ///    {
        ///        public WebTextBox(IPage page, ILocator locator) : base(page, locator)
        ///        {
        ///        }
        ///
        ///        public virtual async Task SetText(string value)
        ///        {
        ///            if (value == null)
        ///                return;
        ///
        ///            await locator.WaitForElementIsVisible();
        ///            await locator.HighlightAction(page);
        ///            awai [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebTextBox {
            get {
                return ResourceManager.GetString("WebTextBox", resourceCulture);
            }
        }
    }
}
